#!/bin/bash

# === Цветовые коды для вывода ===
# \033[31m — красный цвет
# \033[32m — зелёный цвет
# \033[0m  — сброс цвета до стандартного
RED='\033[31m'
GREEN='\033[32m'
RESET='\033[0m'

# === Инициализация переменных ===
# step   — счётчик шагов (ходов)
# hit    — количество угаданных чисел
# miss   — количество неугаданных чисел
# numbers — массив для хранения всех загаданых чисел
# guessed — массив для хранения информации: угадано (1) или нет (0)
declare -i step=0
declare -i hit=0
declare -i miss=0
declare -a numbers
declare -a guessed

# === Основной цикл игры ===
while :
do
    step+=1  # увеличиваем номер шага на 1

    # Получаем последнюю цифру случайного числа, используя параметрическое расширение
    my_number=${RANDOM: -1}

    # Выводим номер текущего шага
    printf "Step: %d\n" "$step"

    # Просим пользователя ввести число или 'q' для выхода
    read -p "Please enter number from 0 to 9 (q - quit): " input

    # === Проверка ввода через конструкцию case ===
    case "${input}" in
        # Если введена цифра от 0 до 9
        [0-9])
            # Проверяем, угадал ли пользователь
            if [[ "${input}" == "${my_number}" ]]; then
                printf "Hit! My number: %s\n" "$my_number"
                hit+=1               # увеличиваем количество угаданных
                guessed+=(1)         # запоминаем, что это угаданный ход
            else
                printf "Miss! My number: %s\n" "$my_number"
                miss+=1              # увеличиваем количество неугаданных
                guessed+=(0)         # запоминаем, что это неугаданный ход
            fi

            # Добавляем загаданное число в массив numbers
            numbers+=("${my_number}")
        ;;
        # Если введена буква 'q' — выходим из игры
        q)
            printf "Bye!\n"
            exit 0
        ;;
        # Если введённое значение не соответствует шаблону
        *)
            printf "Not valid input\nPlease repeat\n"
            step-=1  # не засчитываем попытку
            continue # возвращаемся к началу цикла
        ;;
    esac

    # === Расчёт статистики ===
    total=$(( hit + miss ))              # общее количество ходов
    let hit_percent=hit*100/total        # доля угаданных в процентах
    let miss_percent=100-hit_percent     # доля неугаданных в процентах

    # Выводим статистику
    printf "Hit: %d%% Miss: %d%%\n" "$hit_percent" "$miss_percent"

    # === Вывод последних 10 чисел ===
    printf "Numbers: "

    # Определяем индекс начала для вывода последних 10 чисел
    start=$(( ${#numbers[@]} - 10 ))
    (( start < 0 )) && start=0

    # Проходим по последним элементам массива
    for (( i=start; i<${#numbers[@]}; i++ )); do
        if (( guessed[i] == 1 )); then
            # Если число угадано — печатаем зелёным
            printf "${GREEN}%s${RESET} " "${numbers[i]}"
        else
            # Если не угадано — печатаем красным
            printf "${RED}%s${RESET} " "${numbers[i]}"
        fi
    done

    # Переход на новую строку и пустая строка для визуального разделения шагов
    printf "\n\n"
done
